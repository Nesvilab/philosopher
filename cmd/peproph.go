// Package cmd PeptideProphet top level command
package cmd

import (
	"os"

	"philosopher/lib/ext/peptideprophet"
	"philosopher/lib/met"
	"philosopher/lib/msg"
	"philosopher/lib/sys"

	"github.com/spf13/cobra"
)

// peprophCmd represents the peproph command
var peprophCmd = &cobra.Command{
	Use:   "peptideprophet",
	Short: "Peptide assignment validation",
	//Long:  "Statistical validation of peptide assignments for MS/MS Proteomics data\nPeptidProphet v5.0",
	Run: func(cmd *cobra.Command, args []string) {

		m.FunctionInitCheckUp()

		msg.Executing("PeptideProphet ", Version)

		peptideprophet.Run(m, args)
		m.Serialize()

		// clean tmp
		met.CleanTemp(m.Temp)

		msg.Done()
		return
	},
}

func init() {

	if len(os.Args) > 1 && os.Args[1] == "peptideprophet" {

		m.Restore(sys.Meta())

		peprophCmd.Flags().BoolVarP(&m.PeptideProphet.Exclude, "exclude", "", false, "exclude deltaCn*, Mascot*, and Comet* results from results (default Penalize * results)")
		peprophCmd.Flags().BoolVarP(&m.PeptideProphet.Leave, "leave", "", false, "leave alone deltaCn*, Mascot*, and Comet* results from results (default Penalize * results)")
		peprophCmd.Flags().BoolVarP(&m.PeptideProphet.Icat, "icat", "", false, "apply ICAT model (default Autodetect ICAT)")
		peprophCmd.Flags().BoolVarP(&m.PeptideProphet.Noicat, "noicat", "", false, "do not apply ICAT model (default autodetect ICAT)")
		peprophCmd.Flags().BoolVarP(&m.PeptideProphet.Zero, "zero", "", false, "report results with minimum probability 0")
		peprophCmd.Flags().BoolVarP(&m.PeptideProphet.Accmass, "accmass", "", false, "use accurate mass model binning")
		peprophCmd.Flags().IntVarP(&m.PeptideProphet.Clevel, "clevel", "", 0, "set Conservative Level in neg_stdev from the neg_mean, low numbers are less conservative, high numbers are more conservative")
		peprophCmd.Flags().BoolVarP(&m.PeptideProphet.Ppm, "ppm", "", false, "use ppm mass error instead of Daltons for mass modeling")
		peprophCmd.Flags().BoolVarP(&m.PeptideProphet.Nomass, "nomass", "", false, "disable mass model")
		peprophCmd.Flags().Float64VarP(&m.PeptideProphet.Masswidth, "masswidth", "", 5.0, "model mass width")
		peprophCmd.Flags().BoolVarP(&m.PeptideProphet.Pi, "pi", "", false, "enable peptide pI model")
		peprophCmd.Flags().IntVarP(&m.PeptideProphet.Minpintt, "minpintt", "", 2, "minimum number of NTT in a peptide used for positive pI model")
		peprophCmd.Flags().Float64VarP(&m.PeptideProphet.Minpiprob, "minpiprob", "", 0.9, "minimum probability after first pass of a peptide used for positive pI model")
		peprophCmd.Flags().Float64VarP(&m.PeptideProphet.Minrtprob, "minrtprob", "", 0.9, "minimum probability after first pass of a peptide used for positive RT model")
		peprophCmd.Flags().IntVarP(&m.PeptideProphet.Minrtntt, "minrtntt", "", 2, "minimum number of NTT in a peptide used for positive RT model")
		peprophCmd.Flags().BoolVarP(&m.PeptideProphet.Glyc, "glyc", "", false, "enable peptide glyco motif model")
		peprophCmd.Flags().BoolVarP(&m.PeptideProphet.Phospho, "phospho", "", false, "enable peptide phospho motif model")
		peprophCmd.Flags().BoolVarP(&m.PeptideProphet.Maldi, "maldi", "", false, "enable MALDI mode")
		peprophCmd.Flags().BoolVarP(&m.PeptideProphet.Instrwarn, "instrwarn", "", false, "warn and continue if combined data was generated by different instrument models")
		peprophCmd.Flags().Float64VarP(&m.PeptideProphet.Minprob, "minprob", "", 0.05, "report results with minimum probability")
		peprophCmd.Flags().StringVarP(&m.PeptideProphet.Decoy, "decoy", "", "rev_", "semi-supervised mode, protein name prefix to identify decoy entries")
		peprophCmd.Flags().BoolVarP(&m.PeptideProphet.Decoyprobs, "decoyprobs", "", false, "compute possible non-zero probabilities for decoy entries on the last iteration")
		peprophCmd.Flags().BoolVarP(&m.PeptideProphet.Nontt, "nontt", "", false, "disable NTT enzymatic termini model")
		peprophCmd.Flags().BoolVarP(&m.PeptideProphet.Nonmc, "nonmc", "", false, "disable NMC missed cleavage model")
		peprophCmd.Flags().BoolVarP(&m.PeptideProphet.Expectscore, "expectscore", "", false, "use expectation value as the only contributor to the f-value for modeling")
		peprophCmd.Flags().BoolVarP(&m.PeptideProphet.Nonparam, "nonparam", "", false, "use semi-parametric modeling, must be used in conjunction with --decoy option")
		peprophCmd.Flags().BoolVarP(&m.PeptideProphet.Neggamma, "neggamma", "", false, "use gamma distribution to model the negative hits")
		peprophCmd.Flags().BoolVarP(&m.PeptideProphet.Forcedistr, "forcedistr", "", false, "bypass quality control checks, report model despite bad modelling")
		peprophCmd.Flags().BoolVarP(&m.PeptideProphet.Optimizefval, "optimizefval", "", false, "(SpectraST only) optimize f-value function f(dot,delta) using PCA")
		peprophCmd.Flags().IntVarP(&m.PeptideProphet.MinPepLen, "minpeplen", "", 7, "minimum peptide length not rejected")
		peprophCmd.Flags().StringVarP(&m.PeptideProphet.Output, "output", "", "interact", "output name prefix")
		peprophCmd.Flags().BoolVarP(&m.PeptideProphet.Combine, "combine", "", false, "combine the results from PeptideProphet into a single result file")
		peprophCmd.Flags().StringVarP(&m.PeptideProphet.Database, "database", "", "", "path to the database")
		peprophCmd.Flags().StringVarP(&m.PeptideProphet.Enzyme, "enzyme", "", "", "enzyme used in sample")
		peprophCmd.Flags().MarkHidden("exclude")
		peprophCmd.Flags().MarkHidden("forcedistr")
		peprophCmd.Flags().MarkHidden("icat")
		peprophCmd.Flags().MarkHidden("instrwarn")
		peprophCmd.Flags().MarkHidden("leave")
		peprophCmd.Flags().MarkHidden("maldi")
		peprophCmd.Flags().MarkHidden("minpintt")
		peprophCmd.Flags().MarkHidden("minpiprob")
		peprophCmd.Flags().MarkHidden("minrtntt")
		peprophCmd.Flags().MarkHidden("minrtprob")
		peprophCmd.Flags().MarkHidden("neggamma")
		peprophCmd.Flags().MarkHidden("noicat")
		peprophCmd.Flags().MarkHidden("optimizefval")
		peprophCmd.Flags().MarkHidden("pi")
		peprophCmd.Flags().MarkHidden("zero")

	}

	RootCmd.AddCommand(peprophCmd)
}
