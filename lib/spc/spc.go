package spc

import (
	"bufio"
	"encoding/xml"
	"errors"
	"io"
	"os"
	"path/filepath"
	"strings"
	"sync"

	"github.com/Nesvilab/philosopher/lib/msg"

	"github.com/rogpeppe/go-charset/charset"

	// anon charset
	_ "github.com/rogpeppe/go-charset/data"
)

// DataFormat defines different types of data formats from the SPC
type DataFormat interface {
	Parse()
}

// Parameter tag
type Parameter struct {
	Name  string `xml:"name,attr"`
	Value string `xml:"value,attr"`
}

// Annotation tag
type Annotation struct {
	ProteinDescription []byte `xml:"protein_description,attr"`
}

// ModificationInfo tag
type ModificationInfo struct {
	ModNTermMass     float64            `xml:"mod_nterm_mass,attr"`
	ModCTermMass     float64            `xml:"mod_cterm_mass,attr"`
	ModifiedPeptide  []byte             `xml:"modified_peptide,attr"`
	ModAminoacidMass []ModAminoacidMass `xml:"mod_aminoacid_mass"`
}

// ModAminoacidMass tag
type ModAminoacidMass struct {
	Position int     `xml:"position,attr"`
	Mass     float64 `xml:"mass,attr"`
}

// Parse is the main function for parsing pepxml data
var decoderPool = sync.Pool{
	New: func() interface{} {
		return xml.NewDecoder(nil)
	},
}

func (p *PepXML) Parse(f string) {

	r, _ := os.Open(f)
	defer r.Close()

	if strings.Contains(p.Name, "tmp") {
		msg.Custom(errors.New("it seems that Philosopher filter command encountered some temporary files generated by PeptideProphet or ProteinProphet. Please remove all temporary xml files and rerun from PepetideProphet. If the crash happens again, change PeptideProphet settings or remove the input MS files that resulted in the crash"), "warning")
	}

	xmlFile := io.NopCloser(r)
	defer xmlFile.Close()

	reader := bufio.NewReaderSize(xmlFile, 4096)

	decoder := decoderPool.Get().(*xml.Decoder)
	defer decoderPool.Put(decoder)

	decoder = xml.NewDecoder(reader)
	decoder.CharsetReader = charset.NewReader

	var mpa MsmsPipelineAnalysis
	if err := decoder.Decode(&mpa); err != nil {
		msg.ReadFile(errors.New("Error parsing the file "+p.Name), "error")
	}

	p.MsmsPipelineAnalysis = mpa
	p.Name = "unknown"
}

// Parse is the main function for parsing pepxml data
func (p *ProtXML) Parse(f string) {

	r, _ := os.Open(f)
	defer r.Close()

	xmlFile := io.NopCloser(r)
	defer xmlFile.Close()

	reader := bufio.NewReaderSize(xmlFile, 4096)

	decoder := decoderPool.Get().(*xml.Decoder)
	defer decoderPool.Put(decoder)

	decoder = xml.NewDecoder(reader)
	decoder.CharsetReader = charset.NewReader

	var ps ProteinSummary
	if err := decoder.Decode(&ps); err != nil {
		msg.ReadFile(errors.New("Error parsing the file "+p.Name), "error")
	}

	p.ProteinSummary = ps
	p.Name = filepath.Base(f)

}
