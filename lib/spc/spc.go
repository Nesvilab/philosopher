package spc

import (
	"bufio"
	"encoding/xml"
	"errors"
	"os"
	"path/filepath"
	"philosopher/lib/msg"
	"strings"

	"github.com/rogpeppe/go-charset/charset"

	// anon charset
	_ "github.com/rogpeppe/go-charset/data"
)

// DataFormat defines different types of data formats from the SPC
type DataFormat interface {
	Parse()
}

// Parameter tag
type Parameter struct {
	XMLName xml.Name `xml:"parameter"`
	Name    string   `xml:"name,attr"`
	Value   string   `xml:"value,attr"`
}

// Annotation tag
type Annotation struct {
	XMLName            xml.Name `xml:"annotation"`
	ProteinDescription []byte   `xml:"protein_description,attr"`
}

// ModificationInfo tag
type ModificationInfo struct {
	XMLName          xml.Name           `xml:"modification_info"`
	ModNTermMass     float64            `xml:"mod_nterm_mass,attr"`
	ModCTermMass     float64            `xml:"mod_cterm_mass,attr"`
	ModifiedPeptide  []byte             `xml:"modified_peptide,attr"`
	ModAminoacidMass []ModAminoacidMass `xml:"mod_aminoacid_mass"`
}

// ModAminoacidMass tag
type ModAminoacidMass struct {
	XMLName  xml.Name `xml:"mod_aminoacid_mass"`
	Position int      `xml:"position,attr"`
	Mass     float64  `xml:"mass,attr"`
}

// Parse is the main function for parsing pepxml data
func (p *PepXML) Parse(f string) {

	if strings.Contains(f, "tmp") {
		msg.Custom(errors.New("It seems that Philosopher filter command encountered some temporary files generated by PeptideProphet or ProteinProphet. Please remove all temporary xml files and rerun from PepetideProphet. If the crash happens again, change PeptideProphet settings or remove the input MS files that resulted in the crash"), "warning")
	}

	xmlFile, e := os.Open(f)
	if e != nil {
		msg.ReadFile(e, "error")
	}
	reader := bufio.NewReader(xmlFile)
	decoder := xml.NewDecoder(reader)
	decoder.CharsetReader = charset.NewReader

	var mpa MsmsPipelineAnalysis
	if e = decoder.Decode(&mpa); e != nil {
		msg.DecodeMsgPck(e, "error")
	}
	err := xmlFile.Close()
	if err != nil {
		panic(err)
	}

	p.MsmsPipelineAnalysis = mpa
	p.Name = filepath.Base(f)

}

// Parse is the main function for parsing pepxml data
func (p *ProtXML) Parse(f string) {

	xmlFile, e := os.Open(f)
	if e != nil {
		msg.ReadFile(e, "error")
	}
	defer xmlFile.Close()

	var ps ProteinSummary

	reader := bufio.NewReader(xmlFile)
	decoder := xml.NewDecoder(reader)
	decoder.CharsetReader = charset.NewReader

	if e = decoder.Decode(&ps); e != nil {
		msg.DecodeMsgPck(e, "error")
	}

	p.ProteinSummary = ps
	p.Name = filepath.Base(f)

}
